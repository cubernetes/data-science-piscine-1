services:
  db:
    build:
      additional_contexts:
        data: ../data
      dockerfile_inline: |
        FROM postgres:17.5-bookworm

        COPY --from=data --chown=postgres:postgres --chmod=555 ./customer/ /customer/
        COPY --from=data --chown=postgres:postgres --chmod=555 ./item/ /item/

        COPY --chmod=444 <<-EOF /docker-entrypoint-initdb.d/0-init.sql
        	CREATE TYPE event_types AS ENUM ('cart', 'purchase', 'remove_from_cart', 'view');

            CREATE TABLE brands(
              id            SERIAL        PRIMARY KEY,
              brand_name    TEXT          NOT NULL      UNIQUE
            );

            CREATE TABLE items(
              id            SERIAL        PRIMARY KEY,
              product_id    INTEGER       NOT NULL,
              category_id   BIGINT,
              category_code TEXT[],
              brand         TEXT          REFERENCES brands(brand_name)
            );

            CREATE TEMP TABLE items_staging (
              product_id TEXT,
              category_id TEXT,
              category_code TEXT,
              brand TEXT
            );

            COPY items_staging
            FROM '/item/item.csv' WITH (FORMAT csv, HEADER true);

            INSERT INTO brands (brand_name)
            SELECT DISTINCT brand
            FROM items_staging
            WHERE brand IS NOT NULL AND brand <> ''
            ON CONFLICT (brand_name) DO NOTHING;

            INSERT INTO items (product_id, category_id, category_code, brand)
            SELECT
              product_id::INTEGER,
              MAX(category_id)::BIGINT,
              CASE
                WHEN MAX(category_code) IS NULL OR MAX(category_code) = '' THEN NULL
                ELSE string_to_array(MAX(category_code), '.')
              END,
              NULLIF(MAX(brand), '')
            FROM items_staging
            GROUP BY product_id;
        EOF

        COPY --chmod=444 <<-EOF /0-data.sql.template
        	CREATE TABLE "{{TABLE_NAME}}" (
        		event_time   TIMESTAMP     NOT NULL,
        		event_type   event_types   NOT NULL,
        		product_id   INTEGER       NOT NULL,
        		price        NUMERIC(10,2) NOT NULL,
        		user_id      BIGINT        NOT NULL,
        		user_session UUID
        	);

        	COPY "{{TABLE_NAME}}" FROM '{{CSV_PATH}}'
        	WITH (FORMAT csv, HEADER true);
        EOF

        # 'a0-view' will always come after '9...-data', so this will always run after
        # all the tables have been imported
        COPY --chmod=444 <<-'EOF' /docker-entrypoint-initdb.d/a0-view.sql
            DO $$$$
            DECLARE
                tbl_name text;
                union_sql text := '';
                union_stmt text := ' UNION ';
            BEGIN
                FOR tbl_name IN
                    SELECT table_name
                    FROM information_schema.tables
                    WHERE table_schema = 'public'
                      AND table_name ~ '^data_202[0-9]_[a-z]{3}$'
                    ORDER BY table_name
                LOOP
                    union_sql := union_sql || format('SELECT * FROM %I', tbl_name) || union_stmt;
                END LOOP;

                IF union_sql <> '' THEN
                    union_sql := left(union_sql, length(union_sql) - length(union_stmt));
                    EXECUTE 'DROP VIEW IF EXISTS customers_view; CREATE VIEW customers_without_identical_rows_view AS ' || union_sql;
                END IF;
            END
            $$$$;

            CREATE VIEW customers_view AS
            SELECT event_time, event_type, product_id, price, user_id, user_session
            FROM (
              SELECT
                *,
                event_time - LAG(event_time)
                  OVER (
                    PARTITION BY
                      event_type,
                      product_id,
                      price,
                      user_id,
                      user_session
                    ORDER BY
                      event_time
                  ) AS delta
              FROM customers_without_identical_rows_view
            )
            WHERE
              delta IS DISTINCT FROM INTERVAL '1 second' AND
              delta IS DISTINCT FROM INTERVAL '0 second';

            CREATE VIEW customers_with_items_view AS
            SELECT event_time, event_type, customers_view.product_id, category_id, category_code, brand, price, user_id, user_session
            FROM customers_view
            LEFT OUTER JOIN
            items
            ON items.product_id = customers_view.product_id;

            DROP TABLE IF EXISTS customers;
            CREATE TABLE customers AS SELECT * FROM customers_with_items_view;
        EOF

        COPY --chmod=755 <<-'EOF' /entrypoint.sh
        	#!/usr/bin/env bash

        	set -Eeuxvo pipefail
        	shopt -s nullglob

        	i=1
        	for csv_file in /customer/*.csv; do
        		escaped_basename=$$(basename -- "$$(printf %s "$${csv_file%.csv}")" | sed 's/[\/&]/\\&/g')
        		escaped_filename=$$(printf %s "$${csv_file}" | sed 's/[\/&]/\\&/g')
        		sed "s/{{TABLE_NAME}}/$${escaped_basename}/g; s/{{CSV_PATH}}/$${escaped_filename}/g" /0-data.sql.template > /docker-entrypoint-initdb.d/$$i-data.sql
        		i=$$((i + 1))
        	done

        	exec docker-entrypoint.sh "$$@"
        EOF

        CMD ["postgres"]

        ENTRYPOINT ["/entrypoint.sh"]
    environment:
      POSTGRES_PASSWORD: a
    networks:
      - db
  db-ui:
    image: dpage/pgadmin4:9.4.0
    environment:
      PGADMIN_DEFAULT_EMAIL: a@a.a
      PGADMIN_DEFAULT_PASSWORD: a
    ports:
      - "8080:80"
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
    networks:
      - db

configs:
  servers.json:
    content: |
      { "Servers": { "1": {
          "Name": "Main DB",
          "Group": "Servers",
          "Host": "db",
          "Port": 5432,
          "MaintenanceDB": "postgres",
          "Username": "postgres",
          "Tags": []
      } } }

networks:
  db:
